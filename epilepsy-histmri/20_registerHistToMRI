#!/bin/bash

#script for preprocessing histology slices and MRI

#input parameters? MRI volume, histology slices


if [ "$#" -lt 6 ]
then
 echo "Usage: $0 <in_mri_nii> <data_dir> <struct - Hp/Neo/SubcortL/SubcortR ..>  <stain> <resolution - 100, 20> <subjids>"
 echo "   -t <th>		Set threshold for ex-vivo MRI (default 200; use 0 if already masked)"
 echo ""
 exit 0 

fi


function doNonRigidRegNifty {

#in args:
#doNonRigidReg $reg_hist $mri $nreg_hist $nreg_dir
reg_hist=$1
mri=$2
nreg_hist=$3
nreg_dir=$4
bending=$5

# bending=0.001 # 0.0001 #1e-4  works -- 
 spline_spacing=2 #in voxels

 ctrlpt=$nreg_dir/ctrlpt_field.nii.gz
 deform=$nreg_dir/deformation_field.nii.gz
 displace=$nreg_dir/disp_field.nii.gz
 #position=$nreg_dir/pos_field.nii.gz

#need to blank out orientation before starting
ref=$nreg_dir/mri.nii.gz
flo=$nreg_dir/hist.nii.gz

cp $reg_hist $flo
cp $mri $ref

fslorient -deleteorient $ref
fslorient -deleteorient $flo
fslorient -setsformcode 1 $ref
fslorient -setsformcode 1 $flo


#if [ ! -e $nreg_hist ]
#then

#then
echo reg_f3d -ref $ref -flo $flo -be $bending -cpp $ctrlpt -res $nreg_hist -sx $spline_spacing #-tmask $IGNSLICE
reg_f3d -ref $ref -flo $flo -be $bending -cpp $ctrlpt -res $nreg_hist -sx $spline_spacing #-tmask $IGNSLICE
#get displacement field for xfming fiducials (old version)
#echo reg_resample -ref $ref -flo $flo -cpp $ctrlpt  -odf $displace -res $nreg_hist -TRI -opf $position
#reg_resample -ref $ref -flo $flo -cpp $ctrlpt  -odf $displace -res $nreg_hist -TRI -opf $position

echo reg_transform -ref $ref -cpp2def $ctrlpt $deform
reg_transform -ref $ref -cpp2def $ctrlpt $deform
echo reg_transform -ref $ref -def2disp $deform $displace
reg_transform -ref $ref -def2disp $deform $displace


#now need to add back orientation info
sform=`fslorient -getsform $reg_hist`
echo fslorient -setsform $sform $nreg_hist
fslorient -setsform $sform $nreg_hist
echo fslorient -setqform $sform $nreg_hist
fslorient -setqform $sform $nreg_hist


#exit 0
#fi

}


function checkMinVol {

img1=$1
img2=$2

vol1=`fslstats -t $img1 -V | awk -F\  '{print $1}'`
vol2=`fslstats -t $img2 -V | awk -F\  '{print $1}'`


if [ $vol1 -gt 1000 -a $vol2 -gt 1000 ]
then
  echo 1
else
 echo 0
fi

}




#store output in:
  #  subjDIR/Processed/Ex-Hist_Reg


#in_mri=$data_dir/$subj/mri_$struct/${subj}_${struct}_susc3D.nii.gz
in_mri=$1
data_dir=$2
struct=$3
stain=$4
resolution=$5
subj=$6



shift 5
th=200

hist_uthrp=80
hist_uthr=240

while getopts "t:" options; do
 case $options in
    t ) echo "Threshold for Ex-MRI = $OPTARG"
	th=$OPTARG;;
    * ) usage
	exit 0;;
 esac
done





IN_HIST_DIR=$data_dir/$subj/${resolution}um_Grayscale/histspace/grayscale


OUT=$data_dir/$subj/mri_hist_reg_${struct}_${resolution}um
mkdir -p $OUT


#parameters
REG_RES=0.36


#eventually should use better stopping criteria
MAX_ITER=5

SLICE_SPACING=0.36  # in mm


#1. reorient MRI to standard orientation first
IMG_DIR=$OUT/images
mkdir -p $IMG_DIR



#instead of reorient to std orientation, need to reorient to CORONAL orientation (so that 2D registrations use XY instead of XZ)
 # echo fslreorient2std $IN_subj_DIR/$MRI_IMAGE $MRI_STD
#  fslreorient2std $IN_subj_DIR/$MRI_IMAGE $MRI_STD


if [ ! -e $in_mri ]
then
  echo "$in_mri does not exist! -- exiting!"
  exit 0 
fi




# skip reorientation, should be done already

MRI_STD=$IMG_DIR/ex_mri.nii.gz

hand=`fslorient -getorient $in_mri`;
echo hand: $hand

if [ $hand = NEUROLOGICAL ] ; then
  coronal="RL IS PA"
else
  coronal="LR IS PA"
  #coronal="SI LR PA"
fi

if [ ! -e $MRI_STD ] 
then

 fslswapdim $in_mri $coronal $MRI_STD 
fi



#pre-process MRI:

 #downsample to 0.1mm (is this necessary at this stage?) -- can just do that when doing registration?


#remove background

#try a few diff thresholds ( using robust range threshold - removing outliers)



MRI_TH=$IMG_DIR/ex_mri_th$th.nii.gz
if [ ! -e $MRI_TH ]
then
#echo fslmaths $MRI_STD -thrp $th $MRI_TH
#fslmaths $MRI_STD -thrp $th $MRI_TH
if [ "$th" == 0 ]
then
	cp -v $MRI_STD $MRI_TH
else
echo fslmaths $MRI_STD -thr $th $MRI_TH
fslmaths $MRI_STD -thr $th $MRI_TH
fi

fi



MRI_RES=$IMG_DIR/ex_mri_th${th}_iso.nii.gz
MRI_CROP=$IMG_DIR/ex_mri_th${th}_iso_crop.nii.gz
if [ ! -e $MRI_CROP ]
then
echo mri_convert $MRI_TH -vs $REG_RES $REG_RES $REG_RES $MRI_RES
mri_convert $MRI_TH -vs $REG_RES $REG_RES $REG_RES $MRI_RES
roidim=`fslstats $MRI_RES -w`

#only need to crop in Z-direction .. -- in fact, pad out in other dimensions

padlen=50
dim1=`fslval $MRI_RES dim1`
dim2=`fslval $MRI_RES dim2`

paddim1=$((dim1+padlen+padlen))
paddim2=$((dim2+padlen+padlen))


zi=`echo $roidim | awk -F\  '{print $5}'`
zl=`echo $roidim | awk -F\  '{print $6}'`

echo fslroi $MRI_RES $MRI_CROP -$padlen $paddim1 -$padlen $paddim2 $zi $zl 
fslroi $MRI_RES $MRI_CROP -$padlen $paddim1 -$padlen $paddim2 $zi $zl 

fi

MRI_RES=$MRI_CROP

# now get histology nifti images

HIST_RES=`bashcalc ${resolution}/1000` #mm


# these are MxNx3 images with z dim being R G B

# extract grayscale using green channel and stack

# should set the R,A,S, origin of these images to be origin of ex-vivo MRI


hist_gray=$IMG_DIR/hist_grayscale.nii.gz

#echo $IN_HIST_DIR
#ls $IN_HIST_DIR


#get SFORM for mri


sform_mri=`fslorient -getsform $MRI_RES`
echo $sform_mri

#get tx,ty,tz from sform
#tx=`echo $sform_mri | awk -F\  '{print $4}'`
#ty=`echo $sform_mri | awk -F\  '{print $8}'`
#tz=`echo $sform_mri | awk -F\  '{print $12}'`

sform_hist="$HIST_RES 0 0 0 0 $HIST_RES 0 0 0 0 $HIST_RES 0 0 0 0 1"

#echo tx $tx
#echo ty $ty
#echo tz $tz
echo sform_hist $sform_hist


#center of MRI image
 mri_x=`fslval $MRI_RES dim1`
 mri_px=`fslval $MRI_RES pixdim1`
 mri_y=`fslval $MRI_RES dim2`
 mri_py=`fslval $MRI_RES pixdim2`

 c_mri_x=`bashcalc ${mri_x%\ }*${mri_px%\ }/2`
 c_mri_y=`bashcalc ${mri_y%\ }*${mri_py%\ }/2`
echo c_mri_x $c_mri_x
echo c_mri_y $c_mri_y



ref_mri_slice=$IMG_DIR/ex_mri_refslice.nii.gz

if [ ! -e $ref_mri_slice ]
then

 #instead of changing hdr to slice spacing 4.4, just resample image to 4.4, then extract the ref slice
 ref_mri_vol=$IMG_DIR/ex_mri_refvol.nii.gz

 
 echo mri_convert $MRI_RES -vs $REG_RES $REG_RES $SLICE_SPACING $ref_mri_vol
 mri_convert $MRI_RES -vs $REG_RES $REG_RES $SLICE_SPACING $ref_mri_vol
 echo fslroi $ref_mri_vol $ref_mri_slice 0 -1 0 -1 0 1 
 fslroi $ref_mri_vol $ref_mri_slice 0 -1 0 -1 0 1 
 


# fslroi $MRI_RES $ref_mri_slice 0 -1 0 -1 0 1 
# fslchpixdim $ref_mri_slice $REG_RES $REG_RES $SLICE_SPACING 
# fslorient -deleteorient $ref_mri_slice
# fslorient -setsformcode 1 $ref_mri_slice
# fslorient -setsform $REG_RES 0 0 $tx 0 $REG_RES 0 $ty 0 0 $SLICE_SPACING $tz 0 0 0 1 $ref_mri_slice
# fslorient -setqform $REG_RES 0 0 $tx 0 $REG_RES 0 $ty 0 0 $SLICE_SPACING $tz 0 0 0 1 $ref_mri_slice
fi



hist_stack_imgs=""

nslice=`ls  $IN_HIST_DIR/${subj}_${struct}_*_${stain}.nii.gz | wc -l`

echo nslice: $nslice

#for IN_HIST in `ls $IN_HIST_DIR/${subj}_${STRUCT}_*_HE.nii`
for i in `seq 1 $nslice` 
do

# i=${IN_HIST##*_}
# i=${i%%.*}
 ii=`printf %02d $i`

 IN_HIST=$IN_HIST_DIR/${subj}_${struct}_${ii}_${stain}.nii.gz

 echo IN_HIST $IN_HIST
 if [ ! -e $IN_HIST ]
 then
  echo "Histology slice $IN_HIST not found! skipping..."
  continue
 fi

 HISTSLICE=$IMG_DIR/hist_slice_$ii.nii.gz
 echo HISTSLICE $HISTSLICE

if [ ! -e $HISTSLICE ]
then

# echo fslroi $IN_HIST $HISTSLICE 0 -1 0 -1 1 1 
# fslroi $IN_HIST $HISTSLICE 0 -1 0 -1 1 1 

 cp -v $IN_HIST $HISTSLICE

 echo fslchpixdim $HISTSLICE $HIST_RES $HIST_RES $HIST_RES
 fslchpixdim $HISTSLICE $HIST_RES $HIST_RES $HIST_RES

fslorient -deleteorient $HISTSLICE
fslswapdim $HISTSLICE x z y $HISTSLICE   # does this need to be negative x???
fslorient -setsformcode 1 $HISTSLICE

 fslorient -setsform $sform_hist $HISTSLICE
 fslorient -setqform $sform_hist $HISTSLICE


hist_hand=`fslorient -getorient $HISTSLICE`;

 echo "Hist hand: $hist_hand,  MRI hand: $hand"
if [ ! $hist_hand = $hand ] ; then
 echo fslorient -swaporient $HISTSLICE
 fslorient -swaporient $HISTSLICE
fi


 #now swapdim to coronal:
 echo fslswapdim $HISTSLICE $coronal  $HISTSLICE
 fslswapdim $HISTSLICE $coronal  $HISTSLICE

fi

#perhaps don't include tx,ty,tz from mri yet... 



 #threshold out background 
 HISTSLICE_TH=$IMG_DIR/hist_slice_th${th}_$ii.nii.gz
if [ ! -e $HISTSLICE_TH ]
then
 echo fslmaths $HISTSLICE -uthr $hist_uthr $HISTSLICE_TH
 fslmaths $HISTSLICE -uthr $hist_uthr $HISTSLICE_TH
fi

 #get center of mass of hist slice, and center of mri image
 # c_mri - c_hist = t_hist

 c_hist=`fslstats $HISTSLICE_TH -c`
echo chist $c_hist
c_hist_x=`echo $c_hist | awk -F\  '{print $1}'`
c_hist_z=`echo $c_hist | awk -F\  '{print $3}'`

#translation is c_mri_x - c_hist_x
tx=`bashcalc ${c_mri_x}-${c_hist_x}`
ty=`bashcalc ${c_mri_y}-${c_hist_z}`

#translation y is i*slice_spacing
tz=`bashcalc "(${i}-1)*${SLICE_SPACING}"`

echo tx $tx
echo ty $ty
echo tz $tz

#create init stacking xfm:
stack_dir=$OUT/stack_xfm
mkdir -p $stack_dir

stack_xfm=$stack_dir/hist_stack_$ii.xfm
echo "1 0 0 $tx" > $stack_xfm
echo "0 1 0 $ty" >> $stack_xfm
echo "0 0 1 0" >> $stack_xfm
echo "0 0 0 1" >> $stack_xfm


#prev stacking xfm only translates centerofmass to center of mri slice

#need to also add xfm that translates into phys mri space (using sform & i*slicethickness)




##  use ty=0 for now

HISTSLICE_STACKXFM=$IMG_DIR/hist_slice_th${th}_stack_$ii.nii.gz

if [ ! -e $HISTSLICE_STACKXFM ]
then

#now use flirt to applyxfm with stack_xfm to hist slice (using an mri slice as a reference)
echo flirt -applyxfm -init $stack_xfm -in $HISTSLICE_TH -out $HISTSLICE_STACKXFM -ref $ref_mri_slice
flirt -applyxfm -init $stack_xfm -in $HISTSLICE_TH -out $HISTSLICE_STACKXFM -ref $ref_mri_slice

fi



# i=0 ... N  goes from Anterior to Posterior
# in RAS coord system, Y increasing is from Posterior to Anterior, so need to stack in opposite direction.


# seems EPI_P006 Neo has histology indexed in opposite direction (posterior to anterior)
#if  [ "$subj" = "EPI_P006" -a "$STRUCT" = "Neo" ]
#then
#  hist_stack_imgs="$hist_stack_imgs $HISTSLICE_STACKXFM"
#else
  hist_stack_imgs="$HISTSLICE_STACKXFM $hist_stack_imgs"
#fi


 
done

#combine all stack_xfm'd hist images to make final stack

hist_stack=$IMG_DIR/hist_stack.nii.gz 
if [ ! -e $hist_stack ]
then
echo fslmerge  -z  $hist_stack $hist_stack_imgs
fslmerge  -z  $hist_stack $hist_stack_imgs
fi





bending_energy[2]=0.1
bending_energy[3]=0.05
bending_energy[4]=0.025
bending_energy[5]=0.01
bending_energy[6]=0.005
bending_energy[7]=0.001

#now have stacked hist and MRI

#for in-plane, start with rigid then move to more non-rigid

#schedule[1]="hist_stack_reg.nii.gz"
#schedule[2]="hist_stack_nreg_reg_be0.1.nii.gz"
#schedule[3]="hist_stack_nreg_reg_be0.01.nii.gz"
#schedule[4]="hist_stack_nreg_reg_be0.001.nii.gz"
#schedule[5]="hist_stack_nreg_reg_be0.001.nii.gz"

for iter in `seq 0 $MAX_ITER`
do



  init_hist_stack=$IMG_DIR/hist_stack.nii.gz
if [ "$iter" = "0" ]
then
  hist_stack=$init_hist_stack
else

 #3d register to the appropriate hist stack (depending on schedule) 
# hist_stack=$OUT/3drigid_iter$((iter-1))/${schedule[$iter]}

 #rigid reg
 if [ $iter -lt 3 ]
 then
 hist_stack=$OUT/3drigid_iter$((iter-1))/hist_stack_reg.nii.gz
 else
 #nifty reg
 hist_stack=$OUT/3drigid_iter$((iter-1))/hist_stack_nreg_reg_be${bending_energy[$((iter-1))]}.nii.gz
 fi

fi

reg3d_dir=$OUT/3drigid_iter$iter
mkdir -p $reg3d_dir


reg3d_mri=$reg3d_dir/reg_ex_mri.nii.gz
reg3d_mri_iso=$reg3d_dir/reg_ex_mri.resample_iso.nii.gz

##  --- this was being generated wrong!! don't use it!
reg3d_mri_noresample=$reg3d_dir/reg_ex_mri_noresample.nii.gz


# flirt registration between MRI and hist stack
if [ ! -e $reg3d_mri ]
then
echo flirt -in $MRI_RES -ref $hist_stack -out $reg3d_mri -omat $reg3d_dir/flirt_mri-histstack.xfm -dof 6 -v -searchrx -180 180 -searchry -180 180 -searchrz -180 180
flirt -in $MRI_RES -ref $hist_stack -out $reg3d_mri -omat $reg3d_dir/flirt_mri-histstack.xfm -dof 6 -v -searchrx -180 180 -searchry -180 180 -searchrz -180 180
fi

if [ ! -e $reg3d_mri_noresample ]
then

mri_convert $reg3d_mri -vs $REG_RES $REG_RES $REG_RES $reg3d_mri_iso
flirt -in $MRI_RES -ref $reg3d_mri_iso -out $reg3d_mri_noresample -init $reg3d_dir/flirt_mri-histstack.xfm  -v -applyxfm 

#below was incorrect:
#flirt -in $MRI_RES -ref $MRI_RES -out $reg3d_mri_noresample -init $reg3d_dir/flirt_mri-histstack.xfm  -v -applyxfm 
fi




#now for slice-slice reg:
split_dir=$reg3d_dir/slices
mkdir -p $split_dir

#run fslsplit along y
if [ ! -e $split_dir/mri_0000.nii.gz ]
then
echo fslsplit $reg3d_mri $split_dir/mri_ -z
fslsplit $reg3d_mri $split_dir/mri_ -z
fi

if [ ! -e $split_dir/hist_0000.nii.gz ]
then
echo fslsplit $init_hist_stack $split_dir/hist_ -z
fslsplit $init_hist_stack $split_dir/hist_ -z
fi


rm ${split_dir}/hist_nreg_reg_stack_be*.txt

#run flirt 2d on each slice
for mri in `ls $split_dir/mri_*.nii.gz`
do
 
 suffix=${mri%%.nii.gz}
 suffix=${suffix##*mri_}
 
 hist=${split_dir}/hist_${suffix}.nii.gz
 reg_hist=${split_dir}/hist_reg_${suffix}.nii.gz
 hist_mri_xfm=${split_dir}/flirt_hist-mri_${suffix}.xfm


 if [ ! -e $reg_hist ]
 then
 echo flirt -in $hist -ref $mri -out $reg_hist -omat $hist_mri_xfm -2D -v -schedule $FSLDIR/etc/flirtsch/sch2D_3dof -searchrx -180 180 -searchry -180 180 
 flirt -in $hist -ref $mri -out $reg_hist -omat $hist_mri_xfm -2D -v -schedule $FSLDIR/etc/flirtsch/sch2D_3dof -searchrx -180 180 -searchry -180 180 
 fi



 if [ $iter -gt 1 ]
 then
 
 #do non-rigid reg 


  #only do non-rigid if there there are at least 1000 non-zero voxels in hist & mri
  isMinVol=`checkMinVol $reg_hist $mri`

  echo "isMinVol, $reg_hist, $mri:  $isMinVol"
 

be=${bending_energy[$iter]}


 nreg_stack=${split_dir}/hist_nreg_reg_stack_be${be}.txt


if [ $isMinVol = 1 ]
then
 
   nreg_hist=${split_dir}/hist_nreg_reg_${suffix}_be${be}.nii.gz
   nreg_dir=${split_dir}/nonrigidreg_${suffix}_be${be}
   mkdir -p $nreg_dir

  echo "nreg_hist: $nreg_hist"

   if [ ! -e $nreg_hist ]
   then
  echo doNonRigidRegNifty $reg_hist $mri $nreg_hist $nreg_dir $be 
   doNonRigidRegNifty $reg_hist $mri $nreg_hist $nreg_dir $be > $nreg_dir/log.txt
   fi
  
   echo $nreg_hist >> $nreg_stack

else

  echo skipping
#  cp $reg_hist $nreg_hist
  
   echo $reg_hist >> $nreg_stack

fi

fi #iter == 0

#  doNonRigidRegLDDMM $reg_hist $mri $nreg_hist $nreg_dir

#exit 0





done

#create updated stack:


#using rigid reg:

reg_hist_stack=$reg3d_dir/hist_stack_reg.nii.gz
if [ ! -e $reg_hist_stack ]
then
fslmerge -z $reg_hist_stack ${split_dir}/hist_reg_*.nii.gz
fi


if [ $iter -gt 1 ]
then


be=${bending_energy[$iter]}

 nreg_stack=${split_dir}/hist_nreg_reg_stack_be${be}.txt
 nreg_hist_stack=$reg3d_dir/hist_stack_nreg_reg_be${be}.nii.gz

 if [ ! -e $nreg_hist_stack -a -e $nreg_stack ]
 then

  fslmerge -z $nreg_hist_stack `cat $nreg_stack`

 fi

fi

#using nonrigid reg:
#reg_hist_stack=$reg3d_dir/hist_stack_niftyreg_reg.nii.gz
#if [ ! -e $reg_hist_stack ]
#then
#fslmerge -z $reg_hist_stack ${split_dir}/hist_niftyreg_reg_*.nii.gz
#fi



if [ "$iter" = "$MAX_ITER" ]
then


 mri=$data_dir/$subj/mri_hist_reg_${struct}_${resolution}um/3drigid_iter${iter}/reg_ex_mri.nii.gz 
 echo "runMatlabCmd genFinalTransforms_general "'$data_dir'" "'$subj'" "'$struct'" "$resolution""
 runMatlabCmd genFinalTransforms_general "'$data_dir'" "'$subj'" "'$struct'" "$resolution"


 #resample original image to aligned space in one step
 reg_dir=$data_dir/$subj/mri_hist_reg_${struct}_${resolution}um
 ex_mri=$reg_dir/3drigid_iter5/reg_ex_mri.nii.gz 
 ref_mri=$reg_dir/3drigid_iter5/reg_ex_mri_${resolution}um.nii.gz 
 ref_mri_iso=$reg_dir/3drigid_iter5/reg_ex_mri_${resolution}um_iso.nii.gz 

 out_dir=$reg_dir/aligned
 mkdir -p $out_dir 

 xfm=$reg_dir/final_xfm/ex-aligned.xfm

 thickz=`fslval $ex_mri pixdim3`
 echo "fslval $ex_mri pixdim3"
 res_mm=`bashcalc "$resolution/1000"`
 echo mri_convert $ex_mri -vs $res_mm $res_mm $thickz $ref_mri
 mri_convert $ex_mri -vs $res_mm $res_mm $thickz $ref_mri
 echo mri_convert $ex_mri -vs $res_mm $res_mm $res_mm $ref_mri_iso
 mri_convert $ex_mri -vs $res_mm $res_mm $res_mm $ref_mri_iso

 out_mri=$out_dir/mri_rigid_${resolution}um.nii.gz
 out_mri_iso=$out_dir/mri_rigid_${resolution}um_iso.nii.gz

 echo reg_resample -flo $in_mri -res $out_mri  -aff $xfm -ref $ref_mri
 reg_resample -flo $in_mri -res $out_mri  -aff $xfm -ref $ref_mri
 echo reg_resample -flo $in_mri -res $out_mri_iso  -aff $xfm -ref $ref_mri_iso
 reg_resample -flo $in_mri -res $out_mri_iso  -aff $xfm -ref $ref_mri_iso


fi






done  #iter


